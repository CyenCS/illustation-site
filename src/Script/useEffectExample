import React, { useState, useEffect } from 'react';

function InsertItem() {
  const [itemName, setItemName] = useState('');
  const [amount, setAmount] = useState('');
  const [message, setMessage] = useState('');
  const [refreshList, setRefreshList] = useState(false);  // Track if the list should be refreshed
  const [itemList, setItemList] = useState([]);  // State to hold the list of items

  const handleSubmit = async (event) => {
    event.preventDefault();

    const userid = localStorage.getItem('userid');
    
    if (!userid) {
      setMessage('User is not logged in.');
      return;
    }

    const formData = new FormData();
    formData.append('itemname', itemName);
    formData.append('amount', amount);
    formData.append('userid', userid);

    try {
      const response = await fetch('../UI/Service/insert.php', {
        method: 'POST',
        body: formData,
      });

      const data = await response.json();

      if (data.success) {
        setMessage('Item inserted successfully!');
        setRefreshList(true); // Set refresh flag to true to trigger list refresh
      } else {
        setMessage(data.message);
      }
    } catch (error) {
      console.error('Error:', error);
      setMessage('An error occurred while submitting the form.');
    }
  };

  // Use useEffect to trigger the list refresh when refreshList state changes
  useEffect(() => {
    if (refreshList) {
      // Trigger the search/fetch to refresh the item list
      const userid = localStorage.getItem('userid');
      
      // Example search API call to refresh the list
      fetch(`../UI/Service/getItems.php?userid=${userid}`)
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            setItemList(data.items); // Update state with the new list of items
          } else {
            console.error('Failed to fetch items:', data.message);
          }
        })
        .catch(error => console.error('Error fetching items:', error));

      setRefreshList(false); // Reset the refresh flag
    }
  }, [refreshList]); // This effect runs whenever refreshList state changes

  return (
    <div>
      <form id="insertitem" onSubmit={handleSubmit}>
        <label htmlFor="itemname">Item Name:</label>
        <input
          id="itemname"
          type="text"
          value={itemName}
          onChange={(e) => setItemName(e.target.value)}
          required
        />
        <br />
        <label htmlFor="amount">Amount:</label>
        <input
          id="amount"
          type="number"
          value={amount}
          onChange={(e) => setAmount(e.target.value)}
          required
        />
        <br />
        <button type="submit">Insert Item</button>
      </form>

      {message && <p>{message}</p>}

      <h3>Item List:</h3>
      <ul>
        {itemList.map((item, index) => (
          <li key={index}>{item.itemname} - {item.amount}</li>
        ))}
      </ul>
    </div>
  );
}

export default InsertItem;