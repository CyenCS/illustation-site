const express = require('express');
const router = express.Router();
const db = require('./connect'); // Make sure connect.js exports the MySQL pool
const bcrypt = require('bcrypt');

//Registry
router.post('/registry', async (req, res) => {
  const { name, password } = req.body;

  db.query('SELECT * FROM users WHERE name = ?', [name], async (err, results) => {
    if (err) return res.status(500).json({ success: false, message: 'DB error' });

    if (results.length > 0) {
      return res.status(400).json({ success: false, message: 'Username already exists' });
    }

    try {
      const saltRounds = 10;
      const hashedPassword = await bcrypt.hash(password, saltRounds);

      db.query('INSERT INTO users (name, password) VALUES (?, ?)', [name, hashedPassword], (err, result) => {
        if (err) {
          return res.status(500).json({ success: false, message: 'Error creating account' });
        }

        return res.json({ success: true, 
          user: { name: name }
        });
      });
    } catch (err) {
      return res.status(500).json({ success: false, message: 'Server error' });
    }
  });
});


//Login
router.post('/login', (req, res) => {
  console.log(req.body); // Add this line to log the request body
  const {name, password} = req.body;

  db.query('SELECT * FROM users WHERE name = ?', [name], async (err, results) => {
    if (err) return res.status(500).json({ success: false, message: 'DB error'})
      console.log('DB results:', results);
    
    if (results.length === 0) {
      console.log('No user found');
      return res.status(400).json({ success: false, message: 'Invalid username or password' });
    }
    const user = results[0];
    try{
      const match = await bcrypt.compare(password, user.password);
      console.log('Password match:', match);
      if (!match) {
        return res.status(400).json({ success: false, message: 'Invalid username or password' });
      }
      user.password = undefined; // Remove password from user object

      // Successful login
      return res.json({
        success: true,
        user: { name: user.name, id: user.id }});
      
    } catch (err) {
      console.error('Error comparing passwords:', err);
      return res.status(500).json({ success: false, message: 'Error comparing passwords' });
    }
    
  })
});

router.get('/test', (req, res) => {
  console.log('Test route hit');
  res.json({ success: true });
});


// ‚úÖ PAGINATION ROUTE
router.post('/pagination', (req, res) => {
  const { userid, limit, offset, keyword } = req.body;
  console.log('üìÑ Pagination request:', req.body);

  const query = `
    SELECT * FROM items
    WHERE userid = ? AND itemname LIKE ?
    LIMIT ? OFFSET ?`;

  db.query(query, [userid, `%${keyword}%`, limit, offset], (err, results) => {
    if (err) {
      console.error('‚ùå DB error during pagination:', err);
      return res.status(500).json({ success: false, message: 'DB error' });
    }

    const totalQuery = `
      SELECT COUNT(*) AS total FROM items
      WHERE userid = ? AND itemname LIKE ?`;

    db.query(totalQuery, [userid, `%${keyword}%`], (countErr, countResult) => {
      if (countErr) {
        console.error('‚ùå DB count error:', countErr);
        return res.status(500).json({ success: false, message: 'DB count error' });
      }

      console.log('‚úÖ Pagination success:', results.length, 'items');
      res.json({
        success: true,
        data: results,
        total: countResult[0].total
      });
    });
  });
});



module.exports = router;
